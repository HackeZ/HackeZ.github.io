<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Golang on HackerZ - Blog</title>
    <link>http://hackez.github.io/categories/golang/</link>
    <description>Recent content in Golang on HackerZ - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 03 May 2016 21:35:08 +0800</lastBuildDate>
    <atom:link href="http://hackez.github.io/categories/golang/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>socket</title>
      <link>http://hackez.github.io/socket/</link>
      <pubDate>Tue, 03 May 2016 21:35:08 +0800</pubDate>
      
      <guid>http://hackez.github.io/socket/</guid>
      <description>

&lt;h1 id=&#34;socket-study:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket Study&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-is-socket:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;What is Socket&lt;/h2&gt;

&lt;p&gt;Socket(插座) 作为 UNIX的进程通信机制，一般被通称为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;套接字&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用于描述IP地址和端口，是一个通信链的句柄。&lt;/p&gt;

&lt;p&gt;在Internet上的主机一般会运行多个服务软件，同时提供多个服务，每个服务都打开一个Socket，并绑定在一个端口上，不同端口对应不同的服务。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;正如其英文意思 —— 插座，Socket在不同端口提供着不同的服务，互相之间互不干扰，你只需要将插头插入正确的插座，就可以得到你想要的服务了。&lt;/p&gt;

&lt;h2 id=&#34;socket通讯过程:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket通讯过程&lt;/h2&gt;

&lt;p&gt;Socket类似于电话插座，电话的通话双方相当于互相通信的2个进程，区号是它的网络地址；区内一个单位的交换机相当于一台主机，主机分配给每个用户的局内号码相当于socket号。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;任何用户在通话之前，首先要&lt;strong&gt;占有一部&lt;/strong&gt;电话机，相当于申请一个socket；&lt;/li&gt;
&lt;li&gt;同时还要知道对方的号码，相当于对方有一个固定的的socket地址；&lt;/li&gt;
&lt;li&gt;然后向对方拨打电话，相当于发出连接请求&lt;strong&gt;（假如对方不在同一个区内，还要添加区号，相当于给出网络地址）&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;这时候，如果对方在场并且空闲，相当于通信的另一个主机开机且可以接受连接请求；&lt;/li&gt;
&lt;li&gt;对方拿起电话，双方就可以正式通话，相当于&lt;strong&gt;连接成功&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;双方通话的过程，是一方向电话机发出信号和对方电话机接收信号的过程，相当于向socket发送数据以及接收数据；&lt;/li&gt;
&lt;li&gt;通话结束后，一方挂起电话相当于关闭socket，撤销连接；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;socket-协议:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket 协议&lt;/h2&gt;

&lt;p&gt;Socket协议：（协议，本地地址，本地端口）&lt;br /&gt;
一个完整的socket有一个本地唯一的socket号，由&lt;strong&gt;操作系统进行分配&lt;/strong&gt;
最重要的是，socket是&lt;strong&gt;面向客户/服务器模型&lt;/strong&gt;而设计的，针对客户和服务器程序提供不同的socket系统调用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户可以随机申请一个socket，相当于一个想打电话的人可以在任何一台入网电话上拨号呼叫，系统会为之分配一个socket号；&lt;/li&gt;
&lt;li&gt;但是服务器拥有的是全局公认的socket，任何客户都可以向它发出连接请求和信息请求，相当于一个被呼叫的电话拥有一个呼叫方知道的电话号码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Socket利用&lt;strong&gt;客户/服务器模式&lt;/strong&gt;巧妙地解决了通信之间建立通信连接的问题，服务器socket半相关被全局公认这一概念非常重要。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我们不妨考虑一下，两个&lt;strong&gt;完全随机&lt;/strong&gt;的用户进程之间如何建立通信？假如通信双方没有任何一方的固定socket，就好比打电话的双方不知道彼此的电话号码，要通信是&lt;strong&gt;不可能的&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;socket-api:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket API&lt;/h2&gt;

&lt;p&gt;在Java中，Socket API：
&amp;gt; java.net.Socket 继承于 java.lang.Object&lt;/p&gt;

&lt;p&gt;它有&lt;strong&gt;八个构造器&lt;/strong&gt;，方法并不多，下面介绍频繁使用的三个方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法用于产生“阻塞”，直到接收到一个连接，并且返回一个客户端的socket对象实例。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阻塞 —— 它使程序运行暂时“停留”在这个地方，直到会话产生，然后程序继续。通常的“阻塞”都是由循环产生的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;getInputStream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法获得网络连接输入，同时返回一个InputStream实例，通过该实例可以传输byte字节流。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getOutStream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法连接的是另一端得到输入，同时返回一个OnputSteam，该实例可以得到输入传输的byte字节流。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：其中 getInputStream 以及 getOutStream 方法均可能产生一个 IOException，它必须被捕获，通常都会被另一个流对象使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;socket连接过程:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket连接过程&lt;/h2&gt;

&lt;p&gt;根据连接启动方式以及本地socket连接的目标，socket之间的连接过程可以分成三个步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务器监听&lt;/li&gt;
&lt;li&gt;客户端请求&lt;/li&gt;
&lt;li&gt;连接确认&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;服务器监听&lt;/strong&gt;：是服务器端的socket并不定位具体的客户端socket，而是处于&lt;strong&gt;等待连接&lt;/strong&gt;的状态，实时监控网络状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;客户端请求&lt;/strong&gt;：是指客户端的socket提出连接请求，要连接的目标是服务器端的socket，为此，客户端socket必须要描述清楚它要连接的服务器socket，支出该服务器端socket的&lt;strong&gt;地址&lt;/strong&gt;以及&lt;strong&gt;端口&lt;/strong&gt;，然后就想服务器socket提出连接请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;连接确认&lt;/strong&gt;：是指当服务器端socket监听到或者说是接收到客户端socekt的连接请求，它就响应客户端socket的请求，建立一个新的进程，把服务器端socket的&lt;strong&gt;描述&lt;/strong&gt;发给客户端，一旦客户端&lt;strong&gt;确认了此描述&lt;/strong&gt;，连接就建立好了。而服务器端socket继续处于监听状态，继续等待其他客户端socket的连接请求。&lt;/p&gt;

&lt;p&gt;Socket UDP &amp;amp;&amp;amp; TCP&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://hackez.github.io/about-me/</link>
      <pubDate>Sat, 30 Apr 2016 19:14:56 +0800</pubDate>
      
      <guid>http://hackez.github.io/about-me/</guid>
      <description>

&lt;h1 id=&#34;about-me:8723697e33f65823610bf3f676b8d742&#34;&gt;About Me&lt;/h1&gt;

&lt;p&gt;我是朱冠州，以HackerZ的名字混迹于网络中。于1994年8月出生于广东肇庆，迷迷茫茫直至高中开始喜欢上计算机，于是便选择了计算机科学与技术这门学科考上了北京理工大学珠海学院。平常我是一个喜欢拍照/看推理小说/撸代码的一个小小码农。&lt;/p&gt;

&lt;p&gt;我的大学生活是从&lt;strong&gt;C语言&lt;/strong&gt;开始的，一路上在 &lt;strong&gt;PHP/JAVA/Android/Node/Web&lt;/strong&gt; 中迷失了自我，直至我遇上了&lt;strong&gt;Golang&lt;/strong&gt;，我喜欢Go的那种优雅/简练的语法，更喜欢在Golang世界中的那种自由，所以我心甘情愿当一个Gopher。&lt;/p&gt;

&lt;p&gt;我希望能成为一个能够改善我们身边生活/见证未来科技行业革新的一个&lt;strong&gt;创新者&lt;/strong&gt;以及&lt;strong&gt;见证者&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;contact-me:8723697e33f65823610bf3f676b8d742&#34;&gt;Contact Me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Email: 767110505@qq.com&lt;/li&gt;
&lt;li&gt;Weibo: &lt;a href=&#34;http://weibo.com/u/2246744750&#34;&gt;HackerZGZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/HackeZ&#34;&gt;HackeZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://hackez.github.io&#34;&gt;HackerZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;technology-stack:8723697e33f65823610bf3f676b8d742&#34;&gt;Technology stack&lt;/h1&gt;

&lt;p&gt;前端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS/JavaScript&lt;/li&gt;
&lt;li&gt;JQuery&lt;/li&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP (ThinkPHP)&lt;/li&gt;
&lt;li&gt;NodeJS (Express)&lt;/li&gt;
&lt;li&gt;Golang (Beego/Hugo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据库&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;移动端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Andorid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工具&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;future:8723697e33f65823610bf3f676b8d742&#34;&gt;Future&lt;/h1&gt;

&lt;p&gt;对于未来，我希望能够在广东找到一份我喜爱的工作，能保持我对新技术和事物的爱好，并投身于Coding的最前线。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qiniu Go SDK v7 Problem</title>
      <link>http://hackez.github.io/qn-sdkv7-pb/</link>
      <pubDate>Fri, 15 Apr 2016 16:46:54 +0800</pubDate>
      
      <guid>http://hackez.github.io/qn-sdkv7-pb/</guid>
      <description>&lt;p&gt;下载七牛Go SDK v7遇到的问题&lt;/p&gt;

&lt;p&gt;今天想要使用七牛的Go SDK时候遇到了肯定会出现的一个情况，那就是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ go get -u qiniupkg.com/api.v7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;命令出现了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;golang.org/x/net/context&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不能下载的问题，首先说一下为什么肯定会报错的问题，那就是Go官方将这个包的下载地址更改了（后来翻墙到Go官网发现的），但是不知道为什么go get命令还是将这个包的下载地址设置为原来的那个。
好吧，于是我试着使用七牛提供的方法下载了那个压缩包，并将其解压在&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$GOPATH/src&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目录下，再次运行go get 命令，这时候出现了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;golang.org/x/net/content is not using a known version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;的错误。
无奈之下，只有翻墙出去Go官方网站查看文档了，然后发现Go官方将这个&lt;a href=&#34;https://github.com/golang/net&#34;&gt;net包&lt;/a&gt;放在了Github中，于是我在Github中下载下来这个包，然后在&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$GOPATH/src&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下，也就是Github.com文件夹的平级目录下手动创建了该路径&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;/golang.org/x&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;，然后将net包放进去，再次运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ go get -u qiniupkg.com/api.v7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK，成功了，接下来就可以开始愉快地玩耍了:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本篇将教会你如何使用Hugo快捷地在Github中创建自己的Blog</title>
      <link>http://hackez.github.io/build/</link>
      <pubDate>Wed, 13 Apr 2016 16:55:34 +0800</pubDate>
      
      <guid>http://hackez.github.io/build/</guid>
      <description>

&lt;h2 id=&#34;安装hugo:aba878e576894cc4457876fdf276811e&#34;&gt;安装Hugo&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Hugo是一个使用Golang语言编写的静态Web站点生成框架，其是由Docker前员工Steve Francia进行编写的，因为其开源在Github里，所以安装非常方便，我们可以选择二进制安装包进行安装。安装完成之后可以运行以下命令查看是否正确安装：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正确安装应该会出现如下信息：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T09:29:16+08:00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来就可以愉快地开始Hugo之旅了。&lt;/p&gt;

&lt;h2 id=&#34;创建hugo项目:aba878e576894cc4457876fdf276811e&#34;&gt;创建Hugo项目&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;创建Hugo项目可以使用如下命令&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new site &amp;lt;site-name&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样在该目录下就会出现这个项目文件夹了。
我们 cd 进入该目录，可以看到该目录下有一个名为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;的文件，根据其名字很容易就知道这个就是Hugo的站点的配置文件了。
该文件中仅仅只有3行代码：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;baseurl = &amp;ldquo;&lt;a href=&#34;http://replace-this-with-your-hugo-site.com/&amp;quot;&#34;&gt;http://replace-this-with-your-hugo-site.com/&amp;quot;&lt;/a&gt;
languageCode = &amp;ldquo;en-us&amp;rdquo;&lt;br /&gt;
title = &amp;ldquo;My New Hugo Site&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样也是根据其单词我们也可以知道他们代表的是什么，我们可以对title进行一下修改，改为我们Blog的名字。&lt;/p&gt;

&lt;p&gt;然后我们在该目录下运行命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个命令会将repo转换成静态html文件放入项目的public文件夹下，然后通过访问浏览器的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;地址，即可看到Hugo启动起来了。虽然现在站点是空白一片，但是通过添加Hugo主题，我们可以瞬间建立一个完整Blog站点。&lt;/p&gt;

&lt;h2 id=&#34;选取hugo主题:aba878e576894cc4457876fdf276811e&#34;&gt;选取Hugo主题&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我们可以到Hugo官网选取自己喜欢的&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;主题&lt;/a&gt;
下面我以Hyde主题为例，将该主题应用到自己的Blog中。&lt;/p&gt;

&lt;p&gt;首先在站点的根目录下创建一个 themes 文件夹。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ mkdir themes&lt;br /&gt;
$ cd themes&lt;br /&gt;
$ git clone &lt;a href=&#34;https://github.com/spf13/hyde.git&#34;&gt;https://github.com/spf13/hyde.git&lt;/a&gt;  #下载对应主题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后，我们需要对根目录下的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进行配置，以应用下载下来的主题。&lt;/p&gt;

&lt;p&gt;配置完成的文件如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;    
title = &amp;quot;HackerZ - Blog&amp;quot;    
theme = &amp;quot;hyde&amp;quot;   # 指定themes

[params]    
	description = &amp;quot;Welcome to my personal Blog&amp;quot;   # hyde主题的首页描述 
	themeColor = &amp;quot;theme-base-08&amp;quot;  # 指定hyde的主题颜色
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，主题就算是配置好了，让我们再次运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看看效果吧！&lt;/p&gt;

&lt;h2 id=&#34;新建文章:aba878e576894cc4457876fdf276811e&#34;&gt;新建文章&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;首页以及样式都已经有了，那么下面就来看看怎么新建一篇文章吧。&lt;/p&gt;

&lt;p&gt;在站点项目下运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new welcome.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即可看到在项目的content目录下被创建了一个 welcome.md 文件，该文件就是刚才新建出来的文章了。
我们可以往里面写点东西，注意，这是 markdown 格式的，hugo会将其编译成 html 格式放置在 public 目录下。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;welcome.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;+++    
Categories = [&amp;quot;Development&amp;quot;, &amp;quot;GoLang&amp;quot;]    
Description = &amp;quot;&amp;quot;    
Tags = [&amp;quot;Development&amp;quot;, &amp;quot;golang&amp;quot;]    
date = &amp;quot;2016-03-29T14:38:19+08:00&amp;quot;    
menu = &amp;quot;main&amp;quot;    
title = &amp;quot;Welcome&amp;quot;    

+++

### 
这是使用Hugo创建的站点中的第一篇文章。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动Hugo服务查看效果吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到这里，基本的Hugo使用已经讲解完毕了，接下来就要将该静态站点迁移到我们自己的 github.io 中了。&lt;/p&gt;

&lt;h2 id=&#34;使用github-pages:aba878e576894cc4457876fdf276811e&#34;&gt;使用Github Pages&lt;/h2&gt;

&lt;p&gt;要使用 github-pages 首先需要注册属于自己的 github 账号，注册完成之后，创建一个 repository，名为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个是使用 Github Pages 的命名规定，如我自己就是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HackeZ.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建完成之后，在我们已经写好的Hugo站点下修改配置文件中的 baseurl属性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://&amp;amp;lt;USERNAME&amp;gt;.github.io//&amp;quot;
# baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
# 原baseurl可以将其注释掉，之后本地可以进行调试
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，运行如下命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该命令会将配置文件中的参数进行静态文件编译，运行完之后，可以到public下的 index.html 中看看静态文件的地址是否是有误，如果有误，将不能正确地显示出主题样式。&lt;/p&gt;

&lt;p&gt;一切正确之后，我们以public目录为 &amp;lt;USERNAME&amp;gt;.github.io 项目的主分支，将其 push 到 github仓库中，等待10分钟左右，访问属于你自己的Blog网站吧！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;http://&amp;lt;USERNAME&amp;gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;配置属于自己的hugo主题:aba878e576894cc4457876fdf276811e&#34;&gt;配置属于自己的Hugo主题&lt;/h2&gt;

&lt;p&gt;你们可以看到，我已经对原来的Hyde主题进行了修改了，那么是怎么做到的呢，我们可以直接对 themes/hyde 下的配置文件进行修改，增加自己想要的样式，相信聪明的你肯定可以很快熟悉 Hugo 的语法，创建属于自己的主题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://hackez.github.io/welcome/</link>
      <pubDate>Tue, 29 Mar 2016 14:38:19 +0800</pubDate>
      
      <guid>http://hackez.github.io/welcome/</guid>
      <description>&lt;p&gt;这是使用Hugo创建的站点中的第一篇文章，我是HackerZ。&lt;/p&gt;

&lt;p&gt;如果你想知道如何使用Hugo搭建这样一个Blog的话，可以看看&lt;a href=&#34;http://hackez.github.io/build&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>