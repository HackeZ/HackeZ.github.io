<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Development on HackerZ - Blog</title>
    <link>http://hackez.github.io/categories/development/</link>
    <description>Recent content in Development on HackerZ - Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Aug 2016 11:11:25 +0800</lastBuildDate>
    <atom:link href="http://hackez.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang Package Dependency Management Tool</title>
      <link>http://hackez.github.io/golang-package-dependency-management-tool/</link>
      <pubDate>Sun, 07 Aug 2016 11:11:25 +0800</pubDate>
      
      <guid>http://hackez.github.io/golang-package-dependency-management-tool/</guid>
      <description>

&lt;h1 id=&#34;golang-package-dependency-management-tool:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;Golang Package Dependency Management Tool&lt;/h1&gt;

&lt;h2 id=&#34;intro:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;Intro&lt;/h2&gt;

&lt;p&gt;Golang一直以来被外界诟病的一个问题就是包的依赖管理问题。那么今天就来讲一个：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Golang包依赖管理工具 —— gb&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;gb 在其官网中定义自己为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A project based build tool for the Go programming language.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;一个Golang的项目工程通常由 &lt;code&gt;bin&lt;/code&gt;、&lt;code&gt;pkg&lt;/code&gt;、&lt;code&gt;src&lt;/code&gt;三个子目录构成：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;bin : 存放编译后生成的可执行文件&lt;/li&gt;
&lt;li&gt;pkg : 编译后生成的文件（如：.a）&lt;/li&gt;
&lt;li&gt;src : 存放源代码（如：.go .c .h .s等）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;而 &lt;code&gt;gb&lt;/code&gt; 在这个概念的基础上新增了一个 &lt;code&gt;vendor&lt;/code&gt; 目录来存放项目依赖的第三方包（如 &lt;em&gt;beego&lt;/em&gt; ，&lt;em&gt;gracehttp&lt;/em&gt; 等）&lt;/p&gt;

&lt;h2 id=&#34;gb-action:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;gb action&lt;/h2&gt;

&lt;h4 id=&#34;install:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;Install&lt;/h4&gt;

&lt;p&gt;gb ==&amp;gt; &lt;a href=&#34;https://getgb.io/&#34;&gt;首页&lt;/a&gt;  ==&amp;gt;  &lt;a href=&#34;https://github.com/constabulary/gb/&#34;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;根据说明，使用&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ go get github.com/constabulary/gb/...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;命令即可安装 gb。&lt;/p&gt;

&lt;p&gt;当该命令运行完毕，请检查 &lt;code&gt;env&lt;/code&gt; 下的第一个 &lt;code&gt;$GOPATH&lt;/code&gt; 的 &lt;code&gt;bin&lt;/code&gt; 目录下是否生成了 &lt;code&gt;gb&lt;/code&gt; 以及 &lt;code&gt;gb-vendor&lt;/code&gt; 两个可执行文件。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;如安装报错，请检查你是否正确配置了 $GOPATH 等环境变量。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;use:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;Use&lt;/h4&gt;

&lt;p&gt;下面试着使用 &lt;code&gt;gb&lt;/code&gt; 来构建一个基于第三方包 &lt;code&gt;gracehttp&lt;/code&gt; 的简易 Golang Web 项目，来体验一下 &lt;code&gt;gb&lt;/code&gt; 的魅力。&lt;/p&gt;

&lt;p&gt;首先初始化 &lt;code&gt;hellogb&lt;/code&gt; 项目目录结构：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ cd $GOPATH/src/hellogb
$ mkdir -p src/hellogb
$ mkdir -p vendor/src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编写 Web 程序：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// vim src/hellogb/main.go
package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;net/http&amp;quot;

    &amp;quot;github.com/tabalt/gracehttp&amp;quot;
)

func main() {
    http.HandleFunc(&amp;quot;/&amp;quot;, func(w http.ResponseWriter, r *http.Request) {
        fmt.Fprintf(w, &amp;quot;hello gb&amp;quot;)
    })

    err := gracehttp.ListenAndServe(&amp;quot;:8080&amp;quot;, nil)
    if err != nil {
        fmt.Println(err)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使用 &lt;code&gt;gb&lt;/code&gt; 添加依赖的 &lt;code&gt;gracehttp&lt;/code&gt; 第三方包：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gb vendor fetch github.com/tabalt/gracehttp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最终整个项目目录结构为：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./
|-- src
|   `-- hellogb
|       `-- main.go
`-- vendor
    |-- manifest
    `-- src
        `-- github.com
            `-- tabalt
                `-- gracehttp
                    |-- README.md
                    |-- connection.go
                    |-- gracehttpdemo
                    |   `-- main.go
                    |-- listener.go
                    `-- server.go
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译执行程序：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ gb build hellogb
$ ./bin/hellogb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后访问 &lt;code&gt;http://127.0.0.1:8080/&lt;/code&gt; 即可访问 Web 服务。&lt;/p&gt;

&lt;h4 id=&#34;command:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;Command&lt;/h4&gt;

&lt;h5 id=&#34;gb-command:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;gb Command&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Command&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;build&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;编译包&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;vendor&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;调用 gb-vendor&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;doc&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;显示文档&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;env&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;打印项目的环境变量&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;generate&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;处理源代码生成Go文件&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;info&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;显示项目的信息&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;list&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;显示项目下的所有包&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;test&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;执行测试&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;hr /&gt;

&lt;h5 id=&#34;gb-vendor-parameter:9a13315d2960edba4431d33d6ac1c8bc&#34;&gt;gb vendor Parameter&lt;/h5&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Parameter&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;功能&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fetch&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;获取一个远程依赖&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;update&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;更新一个本地依赖&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;list&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;每行一个列出所有依赖&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;delete&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;删除一个本地依赖&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;purge&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;清除所有未引用的依赖&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;restore&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;从manifest清单文件还原依赖&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;blockquote&gt;
&lt;p&gt;本文参考 tabalt 的 &lt;a href=&#34;http://tabalt.net/blog/golang-package-dependency-management-tool-gb/&#34;&gt;Golang包依赖管理工具gb&lt;/a&gt; 一文。&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>redigo : open too many files</title>
      <link>http://hackez.github.io/redigo-open2manyfiles/</link>
      <pubDate>Wed, 27 Jul 2016 13:29:11 +0800</pubDate>
      
      <guid>http://hackez.github.io/redigo-open2manyfiles/</guid>
      <description>

&lt;h1 id=&#34;redigo-panic-error-open-too-many-files:5b2d3f0d3cc3f195aa4297d2d52b0993&#34;&gt;Redigo - panic error : open too many files.&lt;/h1&gt;

&lt;h3 id=&#34;abstract:5b2d3f0d3cc3f195aa4297d2d52b0993&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;今天对 &lt;a href=&#34;https://www.github.com/HackeZ/getAcFunPage&#34;&gt;getAcFunPage&lt;/a&gt; 项目做 Benchmark 的时候发现了 Redis 会频繁报一个 &lt;code&gt;socket: too many open files&lt;/code&gt; 的错误，后来发现并不是代码的问题，而是 Linux 的设置问题。
下面就来说说我是这么解决这个问题的。&lt;/p&gt;

&lt;h3 id=&#34;problem:5b2d3f0d3cc3f195aa4297d2d52b0993&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;Benchmark 时报错内容截取如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http: panic serving 127.0.0.1:53512: dial tcp :6379: socket: too many open files
goroutine 5322 [running]:
net/http.(*conn).serve.func1(0xc820f87f80)
    /usr/local/go/src/net/http/server.go:1389 +0xc1
panic(0x797240, 0xc820b12050)
    /usr/local/go/src/runtime/panic.go:426 +0x4e9
main.GetPageAndJSON(0x0, 0x0)
    /home/hackerzgz/workspace/golang/src/getAcFunPage/main.go:130 +0x20a
main.HandleGetResp(0x7f2103407500, 0xc8212fb450, 0xc8210a68c0)
    /home/hackerzgz/workspace/golang/src/getAcFunPage/main.go:82 +0x18
net/http.HandlerFunc.ServeHTTP(0x8902f0, 0x7f2103407500, 0xc8212fb450, 0xc8210a68c0)
    /usr/local/go/src/net/http/server.go:1618 +0x3a
net/http.(*ServeMux).ServeHTTP(0xc820015740, 0x7f2103407500, 0xc8212fb450, 0xc8210a68c0)
    /usr/local/go/src/net/http/server.go:1910 +0x17d
net/http.serverHandler.ServeHTTP(0xc82008a680, 0x7f2103407500, 0xc8212fb450, 0xc8210a68c0)
    /usr/local/go/src/net/http/server.go:2081 +0x19e
net/http.(*conn).serve(0xc820f87f80)
    /usr/local/go/src/net/http/server.go:1472 +0xf2e
created by net/http.(*Server).Serve
    /usr/local/go/src/net/http/server.go:2137 +0x44e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出现这个错误的时候， &lt;code&gt;webbench&lt;/code&gt; 的参数为 &lt;code&gt;-c 300 -t 60&lt;/code&gt; ，也就是并发300个客户端访问并持续60s。&lt;/p&gt;

&lt;p&gt;由报错信息第一行中的 &lt;code&gt;dial tcp :6379&lt;/code&gt; 很容易看出，这是由 Redis 所引起的错误。&lt;/p&gt;

&lt;h3 id=&#34;why:5b2d3f0d3cc3f195aa4297d2d52b0993&#34;&gt;Why&lt;/h3&gt;

&lt;p&gt;根据 &lt;a href=&#34;http://stackoverflow.com/questions/19971968/go-golang-redis-too-many-open-files-error&#34;&gt;Stack Overflow&lt;/a&gt; 上的一个回答，这是由于 Linux 下设置的 &lt;strong&gt;文件描述符上限(file descriptors limit)&lt;/strong&gt; 所引起的错误，在Ubuntu系统中，该值上限为 &lt;strong&gt;1024&lt;/strong&gt; ，于是当 Redis 需要接收来自高并发所带来的连接请求时，连接数很有可能 &lt;strong&gt;超出文件描述符的上限值&lt;/strong&gt; ，于是 Redis 就会报错了。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;文件描述符:&lt;br /&gt;
内核（kernel）利用文件描述符（file descriptor）来访问文件。文件描述符是非负整数。打开现存文件或新建文件时，内核会返回一个文件描述符。读写文件也需要使用文件描述符来指定待读写的文件。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;solve:5b2d3f0d3cc3f195aa4297d2d52b0993&#34;&gt;Solve&lt;/h3&gt;

&lt;p&gt;要解决这个问题也很简单，只需要将服务器系统的文件描述符上限修改成一个更大的值即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ ulimit -n 99999
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后还需要对 Redigo 的连接池设置做出修改：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;return &amp;amp;redis.Pool{
		MaxIdle:     64,
		IdleTimeout: 3 * time.Second,
		MaxActive:   99999, // max number of connections
		...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编译，测试。终于不再报错了。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Why HandleFunc Called Twice</title>
      <link>http://hackez.github.io/why-handlefunc-called-twice/</link>
      <pubDate>Sun, 24 Jul 2016 20:03:59 +0800</pubDate>
      
      <guid>http://hackez.github.io/why-handlefunc-called-twice/</guid>
      <description>

&lt;h2 id=&#34;why-handlefunc-called-twice:07503605f6c05f9ac672084948703a1e&#34;&gt;Why &lt;strong&gt;HandleFunc()&lt;/strong&gt; called twice?&lt;/h2&gt;

&lt;h3 id=&#34;abstract:07503605f6c05f9ac672084948703a1e&#34;&gt;Abstract&lt;/h3&gt;

&lt;p&gt;今天遇到之前碰见过的一个问题，但是之前忘记研究了，正好今天终于把这个问题弄清楚了，于是记录下来。&lt;/p&gt;

&lt;p&gt;想必很多做后台的小伙伴都写过服务器了，但是有没有遇到服务器在 &lt;strong&gt;通过不同的（Brower、API）方式访问&lt;/strong&gt; 的时候，服务器响应方法的 &lt;strong&gt;次数&lt;/strong&gt; 是不一样的情况呢？&lt;/p&gt;

&lt;h3 id=&#34;problem:07503605f6c05f9ac672084948703a1e&#34;&gt;Problem&lt;/h3&gt;

&lt;p&gt;先来看看Golang中的简易服务器搭建代码：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func SayHello(rw http.ResponseWriter, req *http.Request) {
    io.WriteString(rw, &amp;quot;hello~ You are in!&amp;quot;)
    log.Println(&amp;quot;Oh, Here is a Guy coming in!&amp;quot;)
}

func main() {
    mux := http.NewServeMux()
    mux.HandleFunc(&amp;quot;/&amp;quot;, SayHello)
    http.ListenAndServe(&amp;quot;:8080&amp;quot;, mux)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这是一个最简单的Golang服务器搭建，当http访问 &lt;code&gt;http://localhost:8080&lt;/code&gt; 的时候，该服务器会对客户端返回 &lt;code&gt;hello~ You are in!&lt;/code&gt; ，同时在服务器控制台中打印 &lt;code&gt;Oh, Here is a Guy coming in!&lt;/code&gt; 。&lt;/p&gt;

&lt;p&gt;有意思的部分来了：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;通过 &lt;strong&gt;Brower&lt;/strong&gt; 访问的时候，服务器控制台会打印出 &lt;strong&gt;两行&lt;/strong&gt; &lt;code&gt;Oh, Here is a Guy coming in!&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;通过 &lt;code&gt;curl http://localhost:8080&lt;/code&gt; 命令进行访问的时候，服务器控制台只会打印 &lt;strong&gt;一行&lt;/strong&gt; &lt;code&gt;Oh, Here is a Guy coming in!&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;why:07503605f6c05f9ac672084948703a1e&#34;&gt;Why&lt;/h2&gt;

&lt;p&gt;为什么会出现那么有趣的问题呢？&lt;a href=&#34;http://stackoverflow.com/questions/33432192/handlefunc-being-called-twice&#34;&gt;StackOver&lt;/a&gt;上也有人问了这个问题，原因出现在 Brower 上，通过打印 &lt;code&gt;requsets&lt;/code&gt;，你会发现 Brower 还会发起二次请求去请求 &lt;code&gt;/favicon.ico&lt;/code&gt;，也就是页面的小图标。&lt;/p&gt;

&lt;p&gt;所以这就是用 &lt;code&gt;CURL&lt;/code&gt; 发起请求的时候，并不会出现二次请求的原因！&lt;/p&gt;

&lt;h2 id=&#34;solve:07503605f6c05f9ac672084948703a1e&#34;&gt;Solve&lt;/h2&gt;

&lt;p&gt;既然知道了这个问题出现在哪，剩下就好办了，既然浏览器要请求图标，那么我们就在写一个路由专门处理这个请求即可：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func main() {
    mux := http.NewServeMux()
    mux.HandleFunc(&amp;quot;/&amp;quot;, SayHello)
    // Handle /favicon.ico
    mux.HandleFunc(&amp;quot;/favicon.ico&amp;quot;, func(rw http.ResponseWriter, req *http.Request) {})
    http.ListenAndServe(&amp;quot;:9000&amp;quot;, mux)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Golang Dev Log</title>
      <link>http://hackez.github.io/golang-dev-log/</link>
      <pubDate>Sat, 23 Jul 2016 16:34:45 +0800</pubDate>
      
      <guid>http://hackez.github.io/golang-dev-log/</guid>
      <description>

&lt;h2 id=&#34;golang-dev-log:4bb127d6454d4a5575ac334c2d512d93&#34;&gt;Golang Dev Log&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;今天快要把 &lt;a href=&#34;https://www.github.com/HackeZ/getAcFunPage&#34;&gt;getAcFunPage&lt;/a&gt; 这个项目完结了，结果在重构项目的时候出现了两个哭笑不得的 &lt;strong&gt;BUG&lt;/strong&gt; 。总结下来，都是因为自身对 Golang 认识不够深入而出现的问题，所以现在这篇 Blog 是专门记录我在Golang开发中遇到的需要注意的点，以此警醒自己！&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;一个通用的结构体应该以一个包的方式存在并进行引用，否则会出现同一个结构体在不同的包中声明之后，在调用的时候，编译器会报 &lt;code&gt;cannot use xxx (type user) as type School.user&lt;/code&gt; 的错误。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example 1

// file main.go
type user struct {
    name     string
    age      int64
}

// file school.go
type user struct {
    name     string
    age      int64
}
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;如果一个函数需要使用一个 &lt;strong&gt;相对路径&lt;/strong&gt; 调用一个 &lt;code&gt;静态文件&lt;/code&gt; ，那么需要将这个 &lt;code&gt;静态文件&lt;/code&gt; 的路径作为参数进行传入。&lt;br /&gt;
因为 Golang 中对于 &lt;code&gt;静态文件&lt;/code&gt; 的调用不是根据函数所在位置的 &lt;strong&gt;相对路径&lt;/strong&gt; ，而是取决于调用这个函数的文件的位置所对应的相对路径。&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// Example 2

// ./markdown/markdown-style.go (Wrong)
func GetStyle() {
    f, err := os.OpenFile(&amp;quot;./markdown-style.css&amp;quot;,...)
}

// ./markdown/markdown-style.go (Corrent)
func GetStyle(filepath string) {
    f, err := os.OpenFile(filepath,...)
}

// ./main.go
func main() {
    // Wrong:  The system cannot find the file specified.
    md.GetStyle()

    // Corrent
    md.Corrent(&amp;quot;./markdown/markdown-style.css&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Redigo Action - 1</title>
      <link>http://hackez.github.io/redigo-action-1/</link>
      <pubDate>Fri, 22 Jul 2016 10:41:10 +0800</pubDate>
      
      <guid>http://hackez.github.io/redigo-action-1/</guid>
      <description>

&lt;h1 id=&#34;redigo-action:f13bb710c262a4678399c189d1ccbd61&#34;&gt;Redigo Action&lt;/h1&gt;

&lt;h4 id=&#34;redis-作为一个内存型的高性能数据库-如今是越来越火了-为了得到更高的-qps-以及-tps-我们无法忽视掉这个如此强大的数据库:f13bb710c262a4678399c189d1ccbd61&#34;&gt;Redis 作为一个内存型的高性能数据库，如今是越来越火了，为了得到更高的 QPS 以及 TPS ，我们无法忽视掉这个如此强大的数据库。&lt;/h4&gt;

&lt;h4 id=&#34;在-redis-官网中-golang语言的-框架-http-redis-io-clients-go-有两个是被官方所推荐的-分别为:f13bb710c262a4678399c189d1ccbd61&#34;&gt;在 Redis 官网中，Golang语言的&lt;a href=&#34;http:redis.io/clients#go&#34;&gt;框架&lt;/a&gt;有两个是被官方所推荐的，分别为：&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;1. &lt;a href=&#34;https:github.com/garyburd/redigo&#34;&gt;Redigo&lt;/a&gt;&lt;/strong&gt;
&lt;strong&gt;2. &lt;a href=&#34;https:github.com/mediocregopher/radix.v2&#34;&gt;Radix&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h4 id=&#34;本着源码易读优先-我选择了-redigo-进行开发尝试-项目地址-点我-https-www-github-com-hackez-getacfunpage:f13bb710c262a4678399c189d1ccbd61&#34;&gt;本着源码易读优先，我选择了 Redigo 进行开发尝试，项目地址&lt;a href=&#34;https:www.github.com/HackeZ/getAcFunPage&#34;&gt;点我&lt;/a&gt;。&lt;/h4&gt;

&lt;h3 id=&#34;action:f13bb710c262a4678399c189d1ccbd61&#34;&gt;Action&lt;/h3&gt;

&lt;p&gt;熟悉Redis的同学都知道，Redis是 &lt;strong&gt;单进程，单线程，IO多路复用&lt;/strong&gt; 的，这一点不同于 MySQL 的多线程。
 这就意味这Redis可以使用长连接来进行通信，那么，我们就需要一个连接池去管理这些长连接，当一个长连接使用完毕之后就可以交给下一个长连接继续进行使用。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;连接池&lt;/strong&gt;
基本思想是在系统初始化的时候，将数据库连接作为对象存储在内存中，当用户需要访问数据库时，并非建立一个新的连接，而是从连接池中取出一个已建立的空闲连接对象。使用完毕后，用户也并非将连接关闭，而是将连接放回连接池中，以供下一个请求访问使用。
而连接的建立、断开都由连接池自身来管理。同时，还可以通过设置连接池的参数来控制连接池中的初始连接数、连接的上下限数以及每个连接的最大使用次数、最大空闲时间等等。
也可以通过其自身的管理机制来监视数据库连接的数量、使用情况等。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而 Redigo 就是支持连接池的，看看 &lt;a href=&#34;https:github.com/garyburd/redigo/blob/master/redis/pool.go#L43&#34;&gt;Redigo - Pool&lt;/a&gt;.
其 L43 ～ L92 就给出了一个完整的 连接池 的正确打开方式。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func newPool(server, password string) *redis.Pool {
      return &amp;amp;redis.Pool{
          MaxIdle: 3,
          IdleTimeout: 240 * time.Second,
          Dial: func () (redis.Conn, error) {
            c, err := redis.Dial(&amp;quot;tcp&amp;quot;, server)
            if err != nil {
                return nil, err
            }
            if _, err := c.Do(&amp;quot;AUTH&amp;quot;, password); err != nil {
                c.Close()
                return nil, err
              }
               return c, err
          },
          TestOnBorrow: func(c redis.Conn, t time.Time) error {
              _, err := c.Do(&amp;quot;PING&amp;quot;)
              return err
          },
      }
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这段简单易懂的代码返回了一个可用的 Redis 连接池，为了能够进行长连接处理，我们还需要定义一个全局的 &lt;strong&gt;redis.Pool&lt;/strong&gt; 变量进行使用。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;  var (
      pool *redis.Pool
      redisServer = flag.String(&amp;quot;redisServer&amp;quot;, &amp;quot;:6379&amp;quot;, &amp;quot;&amp;quot;)
      redisPassword = flag.String(&amp;quot;redisPassword&amp;quot;, &amp;quot;&amp;quot;, &amp;quot;&amp;quot;)
  )

  func main() {
      flag.Parse()
      pool = newPool(*redisServer, *redisPassword)
      ...
  }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当 &lt;strong&gt;request请求&lt;/strong&gt; 来到，我们就可以这样进行获取连接，并且一定记得在使用完毕之后将连接放回连接池。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;   func serveHome(w http.ResponseWriter, r *http.Request) {
       conn := pool.Get()
       defer conn.Close()
       ....
   }
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;到了这里-一个可用并且高性能的-redis-数据库的连接已经基本构建完毕了:f13bb710c262a4678399c189d1ccbd61&#34;&gt;到了这里，一个可用并且高性能的 Redis 数据库的连接已经基本构建完毕了！&lt;/h5&gt;

&lt;h5 id=&#34;接下来就可以愉快地进行使用了:f13bb710c262a4678399c189d1ccbd61&#34;&gt;接下来就可以愉快地进行使用了～&lt;/h5&gt;
</description>
    </item>
    
    <item>
      <title>Cold Start</title>
      <link>http://hackez.github.io/cold-start/</link>
      <pubDate>Wed, 13 Jul 2016 19:39:47 +0800</pubDate>
      
      <guid>http://hackez.github.io/cold-start/</guid>
      <description>

&lt;h1 id=&#34;about-two-different-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;About Two Different Cold Start&lt;/h1&gt;

&lt;h2 id=&#34;app-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;APP Cold Start&lt;/h2&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-s-app-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;&lt;strong&gt;What&amp;rsquo;s App Cold Start&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;对于最近安装的App a，我们不可能得到该对于该App用户的特殊使用信息。尤其是打开该App的概率 P(a)。另一方面，对于给定的 feature（特征）的先验概率（指根据以往经验和分析得到的概率），可以从其他用户的信息中获取。&lt;/p&gt;

&lt;p&gt;因此，对于最近安装的App，怎么估计其打开概率P(a)是至关重要的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;yahoo-s-experimental-result:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;&lt;strong&gt;Yahoo&amp;rsquo;s Experimental Result&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;通过记录最近安装的App打开记录（活跃度），图5（Daily）以及图6（Hourly）：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xsxev.com1.z0.glb.clouddn.com/Days-after-installation.png&#34; alt=&#34;Days After Installation&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;图 5  日常App安装后的活跃度&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xsxev.com1.z0.glb.clouddn.com/Days-after-installation.png&#34; alt=&#34;Hours After Installation&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;图 6  每小时App安装后的活跃度&lt;/p&gt;

&lt;p&gt;从图 5 和 6 中可以看到，最近安装的App一个显着的特点是在安装后的数小时内非常活跃。但是经过这段时间之后，最近安装的App 的活跃度显着减少。与此相反，一些一开始活跃度并不高的 App 经常在它们安装后的很长一段时间依然在使用。&lt;/p&gt;

&lt;h2 id=&#34;to-solve-app-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;&lt;strong&gt;To Solve App Cold Start&lt;/strong&gt;&lt;/h2&gt;

&lt;p&gt;因此，为了更好地获取最近安装App打开频率，我们根据它们的活跃度持续时间长短，定义两种App类型，分别为：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Short-term （活跃度持续时间短，在刚开始的一段时间活跃度很高）&lt;/li&gt;
&lt;li&gt;Long-term（活跃度持续时间长，在刚开始的一段时间活跃度不够高）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;为捕抓每个App在时间上的突出显著性，我们将App使用数据转化为 &lt;strong&gt;Beta(α,β)&lt;/strong&gt; 值，为了区分时间显著性，我们使用尖峰（excess kurtosis）δ来评价每个App的时间使用峰度：
&lt;img src=&#34;http://7xsxev.com1.z0.glb.clouddn.com/Excess-kurtosis-expression.png&#34; alt=&#34;Excess Kurtosis Expression&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;通过尖峰值可以判断最近安装App的类型：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;一个高尖峰值的App意味着它越有可能是Short-term类App（Game）&lt;/li&gt;
&lt;li&gt;一个低尖峰值的App意味着它越有可能是Long-term类App（Communication）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Short-term类的App可以通过获取特定的特点的用户来获取平均打开频率。&lt;/strong&gt;&lt;br /&gt;
&lt;strong&gt;Long-term类的App则可以通过获取所有用户的平均值。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;随着用户打开App的事件增加，我们可以计算最近安装App的打开概率，因此，我们使用贝叶斯平均其他用户的历史信息来计算接下来的使用信息。计算最近安装App的打开概率公式如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://7xsxev.com1.z0.glb.clouddn.com/App-cold-start-expression.png&#34; alt=&#34;App Cold Start Expression&#34; /&gt;
&lt;/p&gt;

&lt;p&gt;通过计算公式，仅仅通过少量的用户打开App事件得到同一App的其他用户近似的非加权值的启动概率。&lt;strong&gt;用户打开App事件越多，该公式的准确率越高。&lt;/strong&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;user-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;User Cold Start&lt;/h2&gt;

&lt;h2 id=&#34;what-s-user-cold-start:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;&lt;strong&gt;What&amp;rsquo;s User Cold Start&lt;/strong&gt;&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;在这一小节，我们提出两种方法解决User冷启动问题，什么是User冷启动呢？
当一个用户安装了一个Launcher软件（Aviate，Buzz，Go 等桌面软件），我们在不知道这个用户的任何信息下如何向该用户推荐App清单呢？这个就是User冷启动问题。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;two-ways-to-solve:824da9944d1d4c2c4e626a02a40cf7ae&#34;&gt;&lt;strong&gt;Two Ways to Solve&lt;/strong&gt;&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;最相似用户策略：
当这个new User在安装了Launcher之后，我们可以在已知的用户集中找到跟他最相似的用户，并将这个用户的使用指标赋值给他。&lt;br /&gt;
那么怎么去计算跟他最相似的用户呢，我们可以使用 &lt;strong&gt;Jaccard系数&lt;/strong&gt; 进行计算，这个系数主要用来比较样本集中的相似性和分散性的一个概率。&lt;br /&gt;
&lt;strong&gt;计算出用户之间的相似度，就可以将最相似用户的App清单进行推送。&lt;/strong&gt;&lt;br /&gt;
事实上，最相似的用户的App清单与新用户的清单还是有很大的不一样的，在极端条件下，也就是不涉及到敏感的用户信息条件下，他们之间的App清单相似度甚至不会超过一个 &lt;strong&gt;纯粹随机策略&lt;/strong&gt; （相当于“猴子排序”）。&lt;br /&gt;
虽然这个策略提高了User冷启动的平均准确度，但是也限制了可生成用户建议数的范围。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;伪用户策略：
通过生成“伪历史”（假的用户使用记录）可以解决用户冷启动问题，而且该策略可以作为新用户训练PTAN模型的一种方法。&lt;br /&gt;
这个想法在于找到少量的相似用户，其App清单能够覆盖新用户的App清单。这是一个简单的 &lt;strong&gt;NP-Hard证明问题&lt;/strong&gt; 。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;blockquote&gt;
&lt;p&gt;P.S 1: NP-Hard问题也就是不能在限定的时间内计算出结果的问题，只能通过候选答案来验证这个答案是不是我们已知问题的一个答案&lt;/p&gt;

&lt;p&gt;P.S 2关于这个问题为什么是一个NP-Hard问题，论文中没有给出解释，如果想了解怎么判断一个问题是不是NP-Hard问题，可以到 &lt;a href=&#34;http://blog.csdn.net/com_stu_zhang/article/details/7248277&#34;&gt;这里&lt;/a&gt; 查看解释，因为解释非常复杂，请允许我不复制粘贴上来&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;通过算法5，我们生成了伪用户数据：
&lt;img src=&#34;http://7xsxev.com1.z0.glb.clouddn.com/Build-pseudo-user.png&#34; alt=&#34;Build Pseudo User&#34; /&gt;
&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Learning in Hadoop - Day 1</title>
      <link>http://hackez.github.io/hadoop-1/</link>
      <pubDate>Mon, 13 Jun 2016 20:45:25 +0800</pubDate>
      
      <guid>http://hackez.github.io/hadoop-1/</guid>
      <description>&lt;p&gt;第一次玩Hadoop&lt;/p&gt;

&lt;p&gt;最近在折腾机器学习，因为查阅到Yahoo的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;《Predicting The Next App That You Are Going To Use》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这一篇Paper的时候，它提到了Google的 &lt;strong&gt;MapReduce&lt;/strong&gt;以及 &lt;strong&gt;Word2Vec&lt;/strong&gt; 。相信折腾过机器学习的小伙伴都会比较熟悉这两个东西了。于是，为了更深入地进行学习，我便无情地掉进了这个 &lt;strong&gt;坑&lt;/strong&gt; 里。&lt;/p&gt;

&lt;p&gt;首先介绍一下背景，Yahoo的这篇Paper主要就是根据用户日常APP的使用习惯，然后对用户下一启动的APP进行预测。因为Yahoo认为日常手机的使用场景会对哪个APP的开启与否有着很强的关联性，于是他们便使用了 &lt;strong&gt;Word2Vec&lt;/strong&gt; 对用户手机中记录的6个手机事件：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Last Location Update&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last Charge Cavle&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last Audio Cable&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last Context Trigger&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last Context Pulled&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Last App Open&lt;/em&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;进行计算词向量，用于文本预测。而Word2Vec有着3个广为流传的版本：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;但是这3个版本对于Yahoo来说性能都是不足的，经我测试，一个800M的文本在C语言版本中计算时间需要20Min！&lt;/p&gt;

&lt;p&gt;而在预测下一个APP这个场景里，这种计算速度是完全不可以接受的，于是Yahoo他们利用MapReduce重写了一个Word2Vec，将这个版本放在云端进行计算。这就是我进行MapReduce学习的原因。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Named Question in Golang</title>
      <link>http://hackez.github.io/lenproblem/</link>
      <pubDate>Thu, 02 Jun 2016 11:08:54 +0800</pubDate>
      
      <guid>http://hackez.github.io/lenproblem/</guid>
      <description>&lt;p&gt;Golang中遇到的命名问题&lt;/p&gt;

&lt;p&gt;昨天在写随机生成字符串代码时候遇到了一个Golang的命名问题，代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;func GetRandomString(len string) string {
    str := &amp;quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&amp;quot;
    bytes := []byte(str)
    result := []byte{}
    r := rand.New(rand.NewSource(time.Now().UnixNano()))

    for i := 0; i &amp;lt; len; i++ {
        result = append(result, bytes[r.Intn(len(str))]) // &amp;lt;- Here is the Problem: `cannot call non-function len (type int)`
    }
    return string(result)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个问题太蛋疼了，之前好像从来没遇到过这个问题，而且Google好像也没有找到相关的问题原因。&lt;/p&gt;

&lt;p&gt;后来一步步排查代码，才发现问题原来是出现在：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;for i := 0; i &amp;lt; &lt;strong&gt;len&lt;/strong&gt;; i++ {&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;中的 &lt;strong&gt;len&lt;/strong&gt; 变量与函数 &lt;strong&gt;len()&lt;/strong&gt; 重复而出现的命名错误，所以只需要将 &lt;strong&gt;len&lt;/strong&gt; 变量重新命名即可解决该问题。&lt;/p&gt;

&lt;p&gt;总结：在Golang中使用的变量一定不要和某个函数名字相同，否则不会通过，我现在暂时不清楚是Golang编译器出现的问题，还是Golang本来就不允许这样写，我会继续查阅相关文档查清楚！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The Channel in Golang</title>
      <link>http://hackez.github.io/channel/</link>
      <pubDate>Wed, 11 May 2016 19:41:18 +0800</pubDate>
      
      <guid>http://hackez.github.io/channel/</guid>
      <description>

&lt;p&gt;Golang中的Channel分析&lt;/p&gt;

&lt;p&gt;作为Golang语言的核心，并发编程是学习Golang的必经之路。对于不同进程之间的通信手段总会涉及到跨进程通信，那么这个通信手段必须是一个可共享内存的方法，而Golang提倡的理念为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“应该以通信作为手段来共享内存”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;而这一句话的直接体现在于Golang所提供的一个预定义数据类型 —— &lt;strong&gt;Channel&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Channel提供了一种机制。它既可以 &lt;strong&gt;同步&lt;/strong&gt; 两个被并发执行的函数，又可以让这两个函数通过传递特定类型的值来进行 &lt;strong&gt;通信&lt;/strong&gt;。使用Channel可以让我们编写更清晰且正确的代码。&lt;/p&gt;

&lt;p&gt;关于使用Channel需要记住的知识点：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;在同一时刻，仅有一个Goroutine能向同一个Channel发送元素值，同时也只有一个Goroutine能从它哪里接收元素值。&lt;/li&gt;
&lt;li&gt;Channel是一个FIFO的消息队列。&lt;/li&gt;
&lt;li&gt;Channel中的元素值已经确保具有原子性。&lt;/li&gt;
&lt;li&gt;Channel可以分为缓冲与非缓冲，它们之间的差别非常大。&lt;/li&gt;
&lt;li&gt;Channel可分为双向与单向，一般通道都会声明为双向，只有在限制函数体中使用通道的方式（只允许发送或接收）才会使用单向Channel。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;talk-is-cheap-show-me-the-code:470efe0e1a81224ed3dc573880ac9e1a&#34;&gt;Talk is Cheap,Show me the Code!&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;初始化通道&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;因为Channel属于引用类型之一，所以必须使用make关键字初始化它。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 缓冲通道（容纳int类型元素，有长度，可暂存元素）
intChan := make(chan int, 5)

// 非缓冲通道（容纳byte类型元素，无长度，不可暂存元素）
byteChan := make(chan byte)
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;发送元素值&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 向intChan通道发送一个元素值为5的元素
intChan &amp;lt;- 5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意：向一个值为nil的Channel进行发送操作会造成当前Goroutine &lt;strong&gt;永久阻塞！&lt;/strong&gt;。&lt;br /&gt;
而向一个已经塞满元素的Channel进行发送操作则会将当前的Goroutine &lt;strong&gt;阻塞&lt;/strong&gt;，直至Channel中的元素被接收，所以一般会在 &lt;strong&gt;select&lt;/strong&gt; 代码块中进行发送操作。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;接收元素值&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 在intChan通道中接收一个元素值
elem := &amp;lt;-intChan

// 接收元素值，并判断该通道是否已经关闭
elem, ok := &amp;lt;-intChan
if !ok {
    fmt.Println(&amp;quot;Channel is Closed!&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样需要注意的是，如果向一个值为nil的Channel进行接收操作，同样会造成 &lt;strong&gt;永久阻塞！&lt;/strong&gt;&lt;br /&gt;
而向一个没有元素值的Channel进行接收操作，也会将当前的Goroutine &lt;strong&gt;阻塞&lt;/strong&gt;，直至Channel中有了新的元素。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;关闭Channel&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;关闭Channel并不是如其字面意思，完全将Channel关闭。而其正确的作用是告诉系统，不应该再允许任何针对被关闭的通道的发送操作，该通道已经被关闭，但是已经缓存在Channel中的元素不会受到影响，这也是Channel非常优秀的特性之一。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;// 调用内建函数close()关闭Channel
close(intChan)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意，无论任何时候，我们都 &lt;strong&gt;不应该&lt;/strong&gt; 在接收端关闭Channel，因为我们永远都不知道发送端是否已经将元素发送完毕。&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
&lt;p&gt;最后，可以到&lt;a href=&#34;https://www.github.com/HackeZ&#34;&gt;这里&lt;/a&gt;学习更多的Channel相关代码！&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
    <item>
      <title>socket</title>
      <link>http://hackez.github.io/socket/</link>
      <pubDate>Tue, 03 May 2016 21:35:08 +0800</pubDate>
      
      <guid>http://hackez.github.io/socket/</guid>
      <description>

&lt;h1 id=&#34;socket-study:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket Study&lt;/h1&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-is-socket:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;What is Socket&lt;/h2&gt;

&lt;p&gt;Socket(插座) 作为 UNIX的进程通信机制，一般被通称为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;套接字&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;用于描述IP地址和端口，是一个通信链的句柄。&lt;/p&gt;

&lt;p&gt;在Internet上的主机一般会运行多个服务软件，同时提供多个服务，每个服务都打开一个Socket，并绑定在一个端口上，不同端口对应不同的服务。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;正如其英文意思 —— 插座，Socket在不同端口提供着不同的服务，互相之间互不干扰，你只需要将插头插入正确的插座，就可以得到你想要的服务了。&lt;/p&gt;

&lt;h2 id=&#34;socket通讯过程:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket通讯过程&lt;/h2&gt;

&lt;p&gt;Socket类似于电话插座，电话的通话双方相当于互相通信的2个进程，区号是它的网络地址；区内一个单位的交换机相当于一台主机，主机分配给每个用户的局内号码相当于socket号。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;任何用户在通话之前，首先要&lt;strong&gt;占有一部&lt;/strong&gt;电话机，相当于申请一个socket；&lt;/li&gt;
&lt;li&gt;同时还要知道对方的号码，相当于对方有一个固定的的socket地址；&lt;/li&gt;
&lt;li&gt;然后向对方拨打电话，相当于发出连接请求&lt;strong&gt;（假如对方不在同一个区内，还要添加区号，相当于给出网络地址）&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;这时候，如果对方在场并且空闲，相当于通信的另一个主机开机且可以接受连接请求；&lt;/li&gt;
&lt;li&gt;对方拿起电话，双方就可以正式通话，相当于&lt;strong&gt;连接成功&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;双方通话的过程，是一方向电话机发出信号和对方电话机接收信号的过程，相当于向socket发送数据以及接收数据；&lt;/li&gt;
&lt;li&gt;通话结束后，一方挂起电话相当于关闭socket，撤销连接；&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;socket-协议:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket 协议&lt;/h2&gt;

&lt;p&gt;Socket协议：（协议，本地地址，本地端口）&lt;br /&gt;
一个完整的socket有一个本地唯一的socket号，由&lt;strong&gt;操作系统进行分配&lt;/strong&gt;
最重要的是，socket是&lt;strong&gt;面向客户/服务器模型&lt;/strong&gt;而设计的，针对客户和服务器程序提供不同的socket系统调用：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;客户可以随机申请一个socket，相当于一个想打电话的人可以在任何一台入网电话上拨号呼叫，系统会为之分配一个socket号；&lt;/li&gt;
&lt;li&gt;但是服务器拥有的是全局公认的socket，任何客户都可以向它发出连接请求和信息请求，相当于一个被呼叫的电话拥有一个呼叫方知道的电话号码。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Socket利用&lt;strong&gt;客户/服务器模式&lt;/strong&gt;巧妙地解决了通信之间建立通信连接的问题，服务器socket半相关被全局公认这一概念非常重要。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;我们不妨考虑一下，两个&lt;strong&gt;完全随机&lt;/strong&gt;的用户进程之间如何建立通信？假如通信双方没有任何一方的固定socket，就好比打电话的双方不知道彼此的电话号码，要通信是&lt;strong&gt;不可能的&lt;/strong&gt;。&lt;/p&gt;

&lt;h2 id=&#34;socket-api:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket API&lt;/h2&gt;

&lt;p&gt;在Java中，Socket API：
&amp;gt; java.net.Socket 继承于 java.lang.Object&lt;/p&gt;

&lt;p&gt;它有&lt;strong&gt;八个构造器&lt;/strong&gt;，方法并不多，下面介绍频繁使用的三个方法：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Accept&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法用于产生“阻塞”，直到接收到一个连接，并且返回一个客户端的socket对象实例。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;阻塞 —— 它使程序运行暂时“停留”在这个地方，直到会话产生，然后程序继续。通常的“阻塞”都是由循环产生的。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
&lt;li&gt;getInputStream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法获得网络连接输入，同时返回一个InputStream实例，通过该实例可以传输byte字节流。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;getOutStream&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;该方法连接的是另一端得到输入，同时返回一个OnputSteam，该实例可以得到输入传输的byte字节流。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;注意：其中 getInputStream 以及 getOutStream 方法均可能产生一个 IOException，它必须被捕获，通常都会被另一个流对象使用。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;socket连接过程:bd9a9c5f94f2e9bf495cac48092e4447&#34;&gt;Socket连接过程&lt;/h2&gt;

&lt;p&gt;根据连接启动方式以及本地socket连接的目标，socket之间的连接过程可以分成三个步骤：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;服务器监听&lt;/li&gt;
&lt;li&gt;客户端请求&lt;/li&gt;
&lt;li&gt;连接确认&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;服务器监听&lt;/strong&gt;：是服务器端的socket并不定位具体的客户端socket，而是处于&lt;strong&gt;等待连接&lt;/strong&gt;的状态，实时监控网络状态。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;客户端请求&lt;/strong&gt;：是指客户端的socket提出连接请求，要连接的目标是服务器端的socket，为此，客户端socket必须要描述清楚它要连接的服务器socket，支出该服务器端socket的&lt;strong&gt;地址&lt;/strong&gt;以及&lt;strong&gt;端口&lt;/strong&gt;，然后就想服务器socket提出连接请求。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;连接确认&lt;/strong&gt;：是指当服务器端socket监听到或者说是接收到客户端socekt的连接请求，它就响应客户端socket的请求，建立一个新的进程，把服务器端socket的&lt;strong&gt;描述&lt;/strong&gt;发给客户端，一旦客户端&lt;strong&gt;确认了此描述&lt;/strong&gt;，连接就建立好了。而服务器端socket继续处于监听状态，继续等待其他客户端socket的连接请求。&lt;/p&gt;

&lt;p&gt;Socket UDP &amp;amp;&amp;amp; TCP&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://hackez.github.io/about-me/</link>
      <pubDate>Sat, 30 Apr 2016 19:14:56 +0800</pubDate>
      
      <guid>http://hackez.github.io/about-me/</guid>
      <description>

&lt;h1 id=&#34;about-me:8723697e33f65823610bf3f676b8d742&#34;&gt;About Me&lt;/h1&gt;

&lt;p&gt;我是朱冠州，以HackerZ的名字混迹于网络中。于1994年8月出生于广东肇庆，迷迷茫茫直至高中开始喜欢上计算机，于是便选择了计算机科学与技术这门学科考上了北京理工大学珠海学院。平常我是一个喜欢拍照/看推理小说/撸代码的一个小小码农。&lt;/p&gt;

&lt;p&gt;我的大学生活是从&lt;strong&gt;C语言&lt;/strong&gt;开始的，一路上在 &lt;strong&gt;PHP/JAVA/Android/Node/Web&lt;/strong&gt; 中迷失了自我，直至我遇上了&lt;strong&gt;Golang&lt;/strong&gt;，我喜欢Go的那种优雅/简练的语法，更喜欢在Golang世界中的那种自由，所以我心甘情愿当一个Gopher。&lt;/p&gt;

&lt;p&gt;我希望能成为一个能够改善我们身边生活/见证未来科技行业革新的一个&lt;strong&gt;创新者&lt;/strong&gt;以及&lt;strong&gt;见证者&lt;/strong&gt;。&lt;/p&gt;

&lt;h1 id=&#34;contact-me:8723697e33f65823610bf3f676b8d742&#34;&gt;Contact Me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;Email: 767110505@qq.com&lt;/li&gt;
&lt;li&gt;Weibo: &lt;a href=&#34;http://weibo.com/u/2246744750&#34;&gt;HackerZGZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Github: &lt;a href=&#34;https://github.com/HackeZ&#34;&gt;HackeZ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Blog: &lt;a href=&#34;http://hackez.github.io&#34;&gt;HackerZ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;technology-stack:8723697e33f65823610bf3f676b8d742&#34;&gt;Technology stack&lt;/h1&gt;

&lt;p&gt;前端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;HTML/CSS/JavaScript&lt;/li&gt;
&lt;li&gt;JQuery&lt;/li&gt;
&lt;li&gt;ReactJS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;后端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;PHP (ThinkPHP)&lt;/li&gt;
&lt;li&gt;NodeJS (Express)&lt;/li&gt;
&lt;li&gt;Golang (Beego/Hugo)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;数据库&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MySQL&lt;/li&gt;
&lt;li&gt;MongoDB&lt;/li&gt;
&lt;li&gt;Redis&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;移动端&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Andorid&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;工具&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Linux&lt;/li&gt;
&lt;li&gt;Git&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;future:8723697e33f65823610bf3f676b8d742&#34;&gt;Future&lt;/h1&gt;

&lt;p&gt;对于未来，我希望能够在广东找到一份我喜爱的工作，能保持我对新技术和事物的爱好，并投身于Coding的最前线。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Qiniu Go SDK v7 Problem</title>
      <link>http://hackez.github.io/qn-sdkv7-pb/</link>
      <pubDate>Fri, 15 Apr 2016 16:46:54 +0800</pubDate>
      
      <guid>http://hackez.github.io/qn-sdkv7-pb/</guid>
      <description>&lt;p&gt;下载七牛Go SDK v7遇到的问题&lt;/p&gt;

&lt;p&gt;今天想要使用七牛的Go SDK时候遇到了肯定会出现的一个情况，那就是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ go get -u qiniupkg.com/api.v7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;命令出现了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;golang.org/x/net/context&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;不能下载的问题，首先说一下为什么肯定会报错的问题，那就是Go官方将这个包的下载地址更改了（后来翻墙到Go官网发现的），但是不知道为什么go get命令还是将这个包的下载地址设置为原来的那个。
好吧，于是我试着使用七牛提供的方法下载了那个压缩包，并将其解压在&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$GOPATH/src&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目录下，再次运行go get 命令，这时候出现了&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;golang.org/x/net/content is not using a known version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;的错误。
无奈之下，只有翻墙出去Go官方网站查看文档了，然后发现Go官方将这个&lt;a href=&#34;https://github.com/golang/net&#34;&gt;net包&lt;/a&gt;放在了Github中，于是我在Github中下载下来这个包，然后在&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$GOPATH/src&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;下，也就是Github.com文件夹的平级目录下手动创建了该路径&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip;/golang.org/x&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;，然后将net包放进去，再次运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ go get -u qiniupkg.com/api.v7&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;OK，成功了，接下来就可以开始愉快地玩耍了:)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>本篇将教会你如何使用Hugo快捷地在Github中创建自己的Blog</title>
      <link>http://hackez.github.io/build/</link>
      <pubDate>Wed, 13 Apr 2016 16:55:34 +0800</pubDate>
      
      <guid>http://hackez.github.io/build/</guid>
      <description>

&lt;h2 id=&#34;安装hugo:aba878e576894cc4457876fdf276811e&#34;&gt;安装Hugo&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;Hugo是一个使用Golang语言编写的静态Web站点生成框架，其是由Docker前员工Steve Francia进行编写的，因为其开源在Github里，所以安装非常方便，我们可以选择二进制安装包进行安装。安装完成之后可以运行以下命令查看是否正确安装：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo version&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;正确安装应该会出现如下信息：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Hugo Static Site Generator v0.14 BuildDate: 2015-05-26T09:29:16+08:00&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;接下来就可以愉快地开始Hugo之旅了。&lt;/p&gt;

&lt;h2 id=&#34;创建hugo项目:aba878e576894cc4457876fdf276811e&#34;&gt;创建Hugo项目&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;创建Hugo项目可以使用如下命令&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new site &amp;lt;site-name&amp;gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这样在该目录下就会出现这个项目文件夹了。
我们 cd 进入该目录，可以看到该目录下有一个名为：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;的文件，根据其名字很容易就知道这个就是Hugo的站点的配置文件了。
该文件中仅仅只有3行代码：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;baseurl = &amp;ldquo;&lt;a href=&#34;http://replace-this-with-your-hugo-site.com/&amp;quot;&#34;&gt;http://replace-this-with-your-hugo-site.com/&amp;quot;&lt;/a&gt;
languageCode = &amp;ldquo;en-us&amp;rdquo;&lt;br /&gt;
title = &amp;ldquo;My New Hugo Site&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;同样也是根据其单词我们也可以知道他们代表的是什么，我们可以对title进行一下修改，改为我们Blog的名字。&lt;/p&gt;

&lt;p&gt;然后我们在该目录下运行命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个命令会将repo转换成静态html文件放入项目的public文件夹下，然后通过访问浏览器的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&#34;http://localhost:1313&#34;&gt;http://localhost:1313&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;地址，即可看到Hugo启动起来了。虽然现在站点是空白一片，但是通过添加Hugo主题，我们可以瞬间建立一个完整Blog站点。&lt;/p&gt;

&lt;h2 id=&#34;选取hugo主题:aba878e576894cc4457876fdf276811e&#34;&gt;选取Hugo主题&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;我们可以到Hugo官网选取自己喜欢的&lt;a href=&#34;http://themes.gohugo.io/&#34;&gt;主题&lt;/a&gt;
下面我以Hyde主题为例，将该主题应用到自己的Blog中。&lt;/p&gt;

&lt;p&gt;首先在站点的根目录下创建一个 themes 文件夹。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ mkdir themes&lt;br /&gt;
$ cd themes&lt;br /&gt;
$ git clone &lt;a href=&#34;https://github.com/spf13/hyde.git&#34;&gt;https://github.com/spf13/hyde.git&lt;/a&gt;  #下载对应主题&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;然后，我们需要对根目录下的&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;进行配置，以应用下载下来的主题。&lt;/p&gt;

&lt;p&gt;配置完成的文件如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
languageCode = &amp;quot;en-us&amp;quot;    
title = &amp;quot;HackerZ - Blog&amp;quot;    
theme = &amp;quot;hyde&amp;quot;   # 指定themes

[params]    
	description = &amp;quot;Welcome to my personal Blog&amp;quot;   # hyde主题的首页描述 
	themeColor = &amp;quot;theme-base-08&amp;quot;  # 指定hyde的主题颜色
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这样，主题就算是配置好了，让我们再次运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;看看效果吧！&lt;/p&gt;

&lt;h2 id=&#34;新建文章:aba878e576894cc4457876fdf276811e&#34;&gt;新建文章&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;首页以及样式都已经有了，那么下面就来看看怎么新建一篇文章吧。&lt;/p&gt;

&lt;p&gt;在站点项目下运行&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo new welcome.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;即可看到在项目的content目录下被创建了一个 welcome.md 文件，该文件就是刚才新建出来的文章了。
我们可以往里面写点东西，注意，这是 markdown 格式的，hugo会将其编译成 html 格式放置在 public 目录下。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;welcome.md&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;+++    
Categories = [&amp;quot;Development&amp;quot;, &amp;quot;GoLang&amp;quot;]    
Description = &amp;quot;&amp;quot;    
Tags = [&amp;quot;Development&amp;quot;, &amp;quot;golang&amp;quot;]    
date = &amp;quot;2016-03-29T14:38:19+08:00&amp;quot;    
menu = &amp;quot;main&amp;quot;    
title = &amp;quot;Welcome&amp;quot;    

+++

### 
这是使用Hugo创建的站点中的第一篇文章。
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后启动Hugo服务查看效果吧。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo server&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;到这里，基本的Hugo使用已经讲解完毕了，接下来就要将该静态站点迁移到我们自己的 github.io 中了。&lt;/p&gt;

&lt;h2 id=&#34;使用github-pages:aba878e576894cc4457876fdf276811e&#34;&gt;使用Github Pages&lt;/h2&gt;

&lt;p&gt;要使用 github-pages 首先需要注册属于自己的 github 账号，注册完成之后，创建一个 repository，名为&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;lt;USERNAME&amp;gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这个是使用 Github Pages 的命名规定，如我自己就是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;HackeZ.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;创建完成之后，在我们已经写好的Hugo站点下修改配置文件中的 baseurl属性：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;config.toml&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code&gt;baseurl = &amp;quot;http://&amp;amp;lt;USERNAME&amp;gt;.github.io//&amp;quot;
# baseurl = &amp;quot;http://replace-this-with-your-hugo-site.com/&amp;quot;
# 原baseurl可以将其注释掉，之后本地可以进行调试
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;保存后，运行如下命令：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;$ hugo -v&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;该命令会将配置文件中的参数进行静态文件编译，运行完之后，可以到public下的 index.html 中看看静态文件的地址是否是有误，如果有误，将不能正确地显示出主题样式。&lt;/p&gt;

&lt;p&gt;一切正确之后，我们以public目录为 &amp;lt;USERNAME&amp;gt;.github.io 项目的主分支，将其 push 到 github仓库中，等待10分钟左右，访问属于你自己的Blog网站吧！&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;http://&amp;lt;USERNAME&amp;gt;.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;配置属于自己的hugo主题:aba878e576894cc4457876fdf276811e&#34;&gt;配置属于自己的Hugo主题&lt;/h2&gt;

&lt;p&gt;你们可以看到，我已经对原来的Hyde主题进行了修改了，那么是怎么做到的呢，我们可以直接对 themes/hyde 下的配置文件进行修改，增加自己想要的样式，相信聪明的你肯定可以很快熟悉 Hugo 的语法，创建属于自己的主题。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Welcome</title>
      <link>http://hackez.github.io/welcome/</link>
      <pubDate>Tue, 29 Mar 2016 14:38:19 +0800</pubDate>
      
      <guid>http://hackez.github.io/welcome/</guid>
      <description>&lt;p&gt;这是使用Hugo创建的站点中的第一篇文章，我是HackerZ。&lt;/p&gt;

&lt;p&gt;如果你想知道如何使用Hugo搭建这样一个Blog的话，可以看看&lt;a href=&#34;http://hackez.github.io/build&#34;&gt;这里&lt;/a&gt;。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>